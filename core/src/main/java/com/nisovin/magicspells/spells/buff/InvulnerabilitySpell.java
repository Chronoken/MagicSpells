package com.nisovin.magicspells.spells.buff;

import java.util.Set;
import java.util.List;
import java.util.UUID;
import java.util.HashSet;

import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.entity.LivingEntity;
import com.nisovin.magicspells.MagicSpells;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;

import com.nisovin.magicspells.spells.BuffSpell;
import com.nisovin.magicspells.util.MagicConfig;
import com.nisovin.magicspells.spells.DamageSpell;
import com.nisovin.magicspells.events.SpellApplyDamageEvent;

public class InvulnerabilitySpell extends BuffSpell {

	private final Set<UUID> entities;
	private final Set<DamageCause> damageCauses;
	private final Set<String> spellDamageTypes;

	public InvulnerabilitySpell(MagicConfig config, String spellName) {
		super(config, spellName);

		damageCauses = new HashSet<>();
		List<String> causes = getConfigStringList("damage-causes", null);
		if (causes != null) {
			for (String cause : causes) {
				cause = cause.replace(" ","_").replace("-","_").toUpperCase();
				try {
					damageCauses.add(DamageCause.valueOf(cause));
				} catch (IllegalArgumentException e) {
					MagicSpells.error("InvulnerabilitySpell '" + internalName + "' has an invalid damage cause defined: " + cause);
				}
			}
		}

		spellDamageTypes = new HashSet<>();
		causes = getConfigStringList("spell-damage-causes", null);
		if (causes != null) spellDamageTypes.addAll(causes);

		entities = new HashSet<>();
	}

	@Override
	public boolean castBuff(LivingEntity entity, float power, String[] args) {
		entities.add(entity.getUniqueId());
		return true;
	}

	@Override
	public boolean isActive(LivingEntity entity) {
		return entities.contains(entity.getUniqueId());
	}

	@Override
	public void turnOffBuff(LivingEntity entity) {
		entities.remove(entity.getUniqueId());
	}

	@Override
	protected void turnOff() {
		entities.clear();
	}

	@EventHandler
	public void onSpellDamage(SpellApplyDamageEvent event) {
		if (spellDamageTypes == null) return;
		LivingEntity livingEntity = event.getTarget();
		if (!isActive(livingEntity)) return;
		if (isExpired(livingEntity)) {
			turnOff(livingEntity);
			return;
		}

		if (!(event.getSpell() instanceof DamageSpell spell)) return;
		String spellDamageType = spell.getSpellDamageType();
		if (spellDamageType == null) return;
		if (!spellDamageTypes.contains(spellDamageType)) return;

		event.applyDamageModifier(0);
		if (livingEntity.getNoDamageTicks() < livingEntity.getMaximumNoDamageTicks() / 2.0F) {
			addUseAndChargeCost(livingEntity);
		}
	}

	@EventHandler(ignoreCancelled = true)
	public void onEntityDamage(EntityDamageEvent event) {
		Entity entity = event.getEntity();
		if (!(entity instanceof LivingEntity livingEntity)) return;
		if (!damageCauses.isEmpty() && !damageCauses.contains(event.getCause())) return;
		if (!isActive(livingEntity)) return;
		if (isExpired(livingEntity)) {
			turnOff(livingEntity);
			return;
		}

		event.setCancelled(true);
		if (livingEntity.getNoDamageTicks() < livingEntity.getMaximumNoDamageTicks() / 2.0F) {
			addUseAndChargeCost(livingEntity);
		}
	}

	public Set<UUID> getEntities() {
		return entities;
	}

	public Set<DamageCause> getDamageCauses() {
		return damageCauses;
	}

	public Set<String> getSpellDamageTypes() {
		return spellDamageTypes;
	}

}
